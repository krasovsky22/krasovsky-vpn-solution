type Query {
  getVpnInstances: [VpnInstance]
  #   photos
  getFaceBaseRekognitionsForPerson(personId: ID!): Person
  getPerson(id: ID!): Person
}

type VpnInstance @aws_iam @aws_cognito_user_pools {
  instanceId: ID!
  instanceState: String!
}

# Photos
type Person @aws_iam @aws_cognito_user_pools {
  id: ID!
  firstName: String
  lastName: String
  createdAt: AWSDateTime!
  baseFaceRekognitions: [BaseFaceRekognition]
}

type UploadedPhoto @aws_iam {
  id: ID!
  s3Path: String!
  createdAt: AWSDateTime!
  recognizedPeople: [Person]
}

type BaseFaceRekognition @aws_iam @aws_cognito_user_pools {
  rekognitionId: ID!
  s3Path: String!
  personId: String!
  createdAt: AWSDateTime!
}

type Mutation {
  createOrUpdateVpnInstance(vpnStateDetails: VpnInstanceInput!): VpnInstance!
    @aws_iam
  startVpnInstance(instanceId: ID!): Boolean @aws_cognito_user_pools
  stopVpnInstance(instanceId: ID!): Boolean @aws_cognito_user_pools
  # photos
  createPerson(personDetails: PersonInput!): Person @aws_cognito_user_pools
  createFaceBaseRecognition(
    baseRecognitionDetails: BaseFaceRekognitionInput!
  ): BaseFaceRekognition! @aws_iam
}

# inputs
input BaseFaceRekognitionInput {
  rekognitionId: ID!
  personId: String!
  s3Path: String!
}

# INPUTS
input VpnInstanceInput {
  instanceId: String!
  instanceState: String!
}

input PersonInput {
  firstName: String
  lastName: String
}

type Subscription {
  vpnInstanceUpdated: VpnInstance
    @aws_subscribe(mutations: ["createOrUpdateVpnInstance"])
  baseFaceRekognitionUpdated: BaseFaceRekognition
    @aws_subscribe(mutations: ["createFaceBaseRecognition"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
