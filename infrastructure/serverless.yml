service: serverless-aws-vpn-solution
frameworkVersion: '3'

custom:
  awsRegion: us-west-1
  dynamoTablePrimaryKey: instanceId
  vpnStatelambdaFunctionName: syncVpnState
  startAndStopVpnInstanceLambdaFunctionName: startAndStopVpnInstance

  cognitoUserPoolName: vpn-user-pool
  mobileUserPoolClient: vpn-user-pool-client-mobile

  appSyncLambdaRole: app-sync-execute-lambda

  adminIAMRoleName: vpn-admin-group-role
  customerIAMRoleName: vpn-customer-group-role

  adminIAMRolePolicyName: vpn-admin-group-role-policy
  customerIAMRolePolicyName: vpn-customer-group-role-policy

  vpnStateTableName: vpn-table-${self:provider.stage}
  awsSyncGraphqlEndpoint: !GetAtt GraphQlApi.GraphQLUrl

  # face rekognition
  ## lambda
  photoProcessorLambdaName: photoProcessorOnUpload
  basePhotoProcessorLambdaName: baseProcessorOnUpload

  ## s3
  s3PhotosBucket: 'krasovsky-family-photos'
  baseUploadFolder: 'baseUploads'
  baseProcessedFolder: 'baseProcessed'

  photoUploadFolder: 'photoUploads'
  processedPhotosFolder: 'photoUploads'

  ## rekognition
  rekognitionCollectionId: 'family-rekognition-collection'

  ## dynamo db
  faceRekognitionBaseTableName: face-rekognition-base-table-${self:provider.stage}
  faceRekognitionBasePrimaryKey: rekognitionId

  dynamodb:
    stages:
      - dev
    start:
      migrate: true

appSync:
  name: vpn-appsync-api-${self:provider.stage}
  authentication:
    type: AMAZON_COGNITO_USER_POOLS
    config:
      userPoolId: !Ref CognitoUserPool
  additionalAuthentications:
    - type: AWS_IAM

  resolvers:
    # queries
    getVpnInstances:
      dataSource: VpnTable
      type: Query
      field: getVpnInstances
      functions:
        - scanVpnTable

    getFaceBaseRekognitions:
      dataSource: BaseFaceRekognitionTable
      type: Query
      field: getFaceBaseRekognitions
      functions:
        - scanFaceBaseRekognitionsTable

    # mutations
    createOrUpdateVpnInstance:
      dataSource: VpnTable
      type: Mutation
      field: createOrUpdateVpnInstance
      functions:
        - putVpnInstance

    createFaceBaseRecognition:
      dataSource: BaseFaceRekognitionTable
      type: Mutation
      field: createFaceBaseRecognition
      functions:
        - putFaceBaseRekognition

    startVpnInstance:
      dataSource: AwsLambda
      type: Mutation
      field: startVpnInstance
      functions:
        - startOrStopVpnInstance

    stopVpnInstance:
      dataSource: AwsLambda
      type: Mutation
      field: stopVpnInstance
      functions:
        - startOrStopVpnInstance

  pipelineFunctions:
    # SCAN
    scanVpnTable:
      dataSource: VpnTable
      code: resolvers/vpnInstances/getVpnInstances.js

    scanFaceBaseRekognitionsTable:
      dataSource: BaseFaceRekognitionTable
      code: resolvers/baseFaceRekognitions/getFaceBaseRekognitions.js

    # MUTATIONS
    putVpnInstance:
      dataSource: VpnTable
      code: resolvers/vpnInstances/putVpnInstance.js

    putFaceBaseRekognition:
      dataSource: BaseFaceRekognitionTable
      code: resolvers/baseFaceRekognitions/putFaceBaseRekognition.js

    startOrStopVpnInstance:
      dataSource: AwsLambda
      code: resolvers/vpnInstances/startOrStopVpnInstance.js

  dataSources:
    VpnTable:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref VpnTable

    BaseFaceRekognitionTable:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref BaseFaceRekognitionTable

    AwsLambda:
      type: AWS_LAMBDA
      config:
        functionArn:
          { Fn::GetAtt: [StartAndStopVpnInstanceLambdaFunction, Arn] }
        serviceRoleArn: { Fn::GetAtt: [AppSyncExecuteLambdaRole, Arn] }

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: ${self:custom.awsRegion}
  environment:
    GRAPHQL_AWS_REGION: ${self:custom.awsRegion}
    #GRAPHQL_ENDPOINT: !GetAtt GraphQlApi.GraphQLUrl
    GRAPHQL_ENDPOINT: 'https://mpe7fmajevh7pbb7zt4mlwktk4.appsync-api.us-west-1.amazonaws.com/graphql'
    PHOTOS_S3_BUCKET: ${self:custom.s3PhotosBucket}
    PROCESSED_FOLDER: ${self:custom.processedPhotosFolder}
    BASE_PROCESSED_FOLDER: ${self:custom.baseProcessedFolder}
    REKOGNITION_COLLECTION_ID: ${self:custom.rekognitionCollectionId}

plugins:
  - serverless-offline
  - serverless-export-env
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function

functions:
  syncVpnState:
    name: ${self:custom.vpnStatelambdaFunctionName}
    handler: lambdaSyncVpnState.handler
    events:
      - cloudwatchEvent:
          name: 'vpn-service-cloudwatch-event-on-ec2-instance-state-change'
          description: 'CloudWatch Event triggered on EC2 Instance pending state'
          event:
            source:
              - 'aws.ec2'
            detail-type:
              - 'EC2 Instance State-change Notification'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - appsync:GraphQL
        Resource:
          - {
              Fn::Join:
                [
                  '',
                  [
                    { Ref: GraphQlApi },
                    '/types/Mutation/fields/createOrUpdateVpnInstance',
                  ],
                ],
            }

  startAndStopVpnInstance:
    name: ${self:custom.startAndStopVpnInstanceLambdaFunctionName}
    handler: lambdaStartAndStopVpnInstance.handler
    iamRoleStatementsName: 'lambda-start-stop-ec2'
    iamRoleStatements:
      - Effect: Allow
        Resource:
          - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
        Action:
          - 'ec2:Start*'
          - 'ec2:Stop*'

  processBasePhoto:
    name: ${self:custom.basePhotoProcessorLambdaName}
    handler: lambdaProcessUploadedBasePhoto.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.baseUploadFolder}/'
          existing: true
    iamRoleStatements:
      # publish to amazon rekognition
      - Effect: Allow
        Action:
          - rekognition:IndexFaces
        Resource:
          - { Fn::GetAtt: [FaceRekognitionCollection, Arn] }
      # read/delete files from s3
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'
      # appSync Mutations
      - Effect: Allow
        Action:
          - appsync:GraphQL
        Resource:
          - {
              Fn::Join:
                [
                  '',
                  [
                    { Ref: GraphQlApi },
                    '/types/Mutation/fields/createFaceBaseRecognition',
                  ],
                ],
            }

  processUploadedPhoto:
    name: ${self:custom.photoProcessorLambdaName}
    handler: lambdaProcessUploadedFamilyPhoto.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.photoUploadFolder}/'
          existing: true
    iamRoleStatements:
      # publish to amazon rekognition
      - Effect: Allow
        Action:
          - rekognition:SearchFacesByImage
        Resource:
          - { Fn::GetAtt: [FaceRekognitionCollection, Arn] }
      # read/delete files from s3
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'
      # appSync Mutations
      # - Effect: Allow
      #   Action:
      #     - appsync:GraphQL
      #   Resource:
      #     - {
      #         Fn::Join:
      #           [
      #             '',
      #             [
      #               { Ref: GraphQlApi },
      #               '/types/Mutation/fields/createFaceBaseRecognition',
      #             ],
      #           ],
      #       }

resources:
  Resources:
    # DYNAMO DB
    BaseFaceRekognitionTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ${self:custom.faceRekognitionBasePrimaryKey}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:custom.faceRekognitionBasePrimaryKey}
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.faceRekognitionBaseTableName}

    VpnTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: ${self:custom.dynamoTablePrimaryKey}
            AttributeType: S
        KeySchema:
          - AttributeName: ${self:custom.dynamoTablePrimaryKey}
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:custom.vpnStateTableName}

    # COGNITO
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:custom.cognitoUserPoolName}
        UsernameAttributes:
          - 'email'

    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:custom.mobileUserPoolClient}
        UserPoolId: !Ref CognitoUserPool

    # User Pool Groups

    CognitoAdminGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: 'Admin users belongs to this group'
        GroupName: 'Admin'
        Precedence: 0
        RoleArn:
          Fn::GetAtt: [CognitoAdminIAMRole, Arn]
        UserPoolId: !Ref CognitoUserPool

    CognitoCustomerGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: 'Cusomer users belongs to this group'
        GroupName: 'Customer'
        Precedence: 1
        RoleArn:
          Fn::GetAtt: [CognitoUserIAMRole, Arn]
        UserPoolId: !Ref CognitoUserPool

    # IAM Roles
    CognitoAdminIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.adminIAMRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Federated:
                - 'cognito-identity-amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
        Description: 'VPN Admin Group Policy'
        Policies:
          - PolicyName: ${self:custom.adminIAMRolePolicyName}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    Fn::GetAtt: [VpnTable, Arn]

    AppSyncExecuteLambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.appSyncLambdaRole}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Service:
                - 'appsync.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
        Description: 'App Sync Policy to execute lambda'
        Policies:
          - PolicyName: awssync-invoke-lambda-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'lambda:InvokeFunction'
                    - 'lambda:InvokeAsync'
                  Resource:
                    - !Sub 'arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${self:custom.startAndStopVpnInstanceLambdaFunctionName}'

    CognitoUserIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.customerIAMRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Federated:
                - 'cognito-identity-amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
        Description: 'VPN Customer Group Policy'
        Policies:
          - PolicyName: ${self:custom.customerIAMRolePolicyName}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    Fn::GetAtt: [VpnTable, Arn]

    FaceRekognitionCollection:
      Type: AWS::Rekognition::Collection
      Properties:
        CollectionId: ${self:custom.rekognitionCollectionId}


  Outputs:
    AwsAppSyncRegion:
      Description: 'AppSync Region'
      Value: ${self:custom.awsRegion}
    AwsAppSyncAuthenticationType:
      Description: 'AppSync Primary Authentication Type'
      Value: AMAZON_COGNITO_USER_POOLS
    AwsAppSyncRealTimeGraphqlEndpoint:
      Description: 'AppSync Graphql Endpoint'
      Value: !GetAtt GraphQlApi.GraphQLUrl
    AwsAppSyncGraphqlEndpoint:
      Description: 'AppSync Graphql Reacltime Endpoint'
      Value: !GetAtt GraphQlApi.RealtimeUrl

    AwsCognitoRegion:
      Description: 'Cognito Region'
      Value: ${self:custom.awsRegion}

    AwsCognitoUserPoolId:
      Description: 'Cognito User Pool Id'
      Value: !Ref CognitoUserPool

    AwsCognitoUserPoolWebClientId:
      Description: 'Cognito Web Client Id'
      Value: !Ref CognitoUserPoolClient

    AwsCognitoMandatorySignIn:
      Description: 'Cognito Mandatory Sign In'
      Value: true
