service: serverless-aws-photos-solution
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  stage: dev
  region: us-west-1
  runtime: nodejs18.x
  environment:
    GRAPHQL_AWS_REGION: ${self:provider.region}
    GRAPHQL_ENDPOINT: !GetAtt GraphQlApi.GraphQLUrl
    # GRAPHQL_ENDPOINT: https://eqlqnr7hnnatbmlaeduzirjwrq.appsync-api.us-west-1.amazonaws.com/graphql
    UNSUPPPORTED_FOLDER: ${self:custom.unsupportedFolder}
    HEIC_CONVERTER_FOLDER: ${self:custom.heicConverterFolder}
    IMAGE_SORTING_FOLDER: ${self:custom.imageSortingFolder}

    IMAGE_PROCESSING_FOLDER: ${self:custom.imageProcessingFolder}
    IMAGE_BASE_PROCESSING_FOLDER: ${self:custom.imageBaseProcessingFolder}
    
    PHOTOS_S3_BUCKET: ${self:custom.s3PhotosBucket}
    BASE_PROCESSED_FOLDER: ${self:custom.baseProcessedFolder}
    PHOTO_PROCESSED_FOLDER: ${self:custom.processedPhotosFolder}
    REKOGNITION_COLLECTION_ID: ${self:custom.rekognitionCollectionId}

custom:
  dotenv:
    required:
      env:
        - REGION
        - PROJECT_NAME

  esbuild:
    bundle: true
    minify: true
  appSyncName: ${env:PROJECT_NAME}-familyPhotos-${self:provider.stage}

  photosGroupIamRoleName: ${env:PROJECT_NAME}-photosCustomerGroupRole-${self:provider.stage}

  ## lambda
  photoProcessorLambdaName: ${env:PROJECT_NAME}-photoOnUpload-${self:provider.stage}
  basePhotoProcessorLambdaName: ${env:PROJECT_NAME}-baseOnUpload-${self:provider.stage}

  ## s3
  s3PhotosBucket: '${env:PROJECT_NAME}-krasovsky-family-photos-${self:provider.stage}'

  ## folder on s3
  uploadFolder: uploads
  unsupportedFolder: unsupported
  uploadFolderProcessorLambda: ${env:PROJECT_NAME}-photoUploadProcessor-${self:provider.stage}

  heicConverterFolder: heicProcessing
  heicImageLambda: ${env:PROJECT_NAME}-photoHeicImageConverter-${self:provider.stage}


  imageSortingLambda: ${env:PROJECT_NAME}-imageSorting-${self:provider.stage}
  imageSortingFolder: imageSorting
  imageBaseProcessingFolder: baseImageProcessing
  imageProcessingFolder: imageProcessing

  baseImageProcessingLambda: ${env:PROJECT_NAME}-baseImageProcessing-${self:provider.stage}
  baseImageProcessingFolder: 'baseImageProcessing'
  baseProcessedFolder: 'baseProcessed'

  photoProcessLambda: ${env:PROJECT_NAME}-photoProcess-${self:provider.stage}
  processedPhotosFolder: 'photoProcessedArchive'

  ## rekognition
  rekognitionCollectionId: '${env:PROJECT_NAME}-family-rekognition-collection-${self:provider.stage}'

  ## dynamo db
  photosTable: ${env:PROJECT_NAME}-familyPhotos-${self:provider.stage}

appSync:
  name: ${self:custom.appSyncName}
  authentication:
    type: AMAZON_COGNITO_USER_POOLS
    config:
      userPoolId: ${param:AwsCognitoUserPoolId}
  additionalAuthentications:
    - type: AWS_IAM

  resolvers:
    # queries
    getFaceBaseRekognitionsForPerson:
      dataSource: photosTable
      type: Query
      field: getFaceBaseRekognitionsForPerson
      functions:
        - getFaceBaseRekognitionsForPerson
    
    getPersonById:
      dataSource: photosTable
      type: Query
      field: getPersonById
      functions:
        - getPersonById
        
    getPersonPhotos:
      dataSource: photosTable
      type: Query
      field: getPersonPhotos
      functions:
        - getPersonPhotos

    # mutations
    createFaceBaseRecognition:
      dataSource: photosTable
      type: Mutation
      field: createFaceBaseRecognition
      functions:
        - createFaceBaseRecognition

    createPerson:
      dataSource: photosTable
      type: Mutation
      field: createPerson
      functions:
        - createPersonFunction

    addPhotoFunction:
      dataSource: photosTable
      type: Mutation
      field: addPhoto
      functions:
        - addPhotoFunction

    addPhotoPersonConnector:
      dataSource: photosTable
      type: Mutation
      field: addPhotoPersonConnector
      functions:
        - addPhotoPersonConnectorFunction

  pipelineFunctions:
    getFaceBaseRekognitionsForPerson:
      dataSource: photosTable
      code: resolvers/queries/getFaceBaseRekognitionsForPerson.js

    getPersonById:
      dataSource: photosTable
      code: resolvers/queries/getPersonById.js

    getPersonPhotos:
      dataSource: photosTable
      code: resolvers/queries/getPersonPhotos.js

    # MUTATIONS
    createPersonFunction:
      dataSource: photosTable
      code: resolvers/mutations/createPerson.js

    createFaceBaseRecognition:
      dataSource: photosTable
      code: resolvers/mutations/createFaceBaseRekognition.js

    addPhotoFunction:
      dataSource: photosTable
      code: resolvers/mutations/addPhotoFunction.js

    addPhotoPersonConnectorFunction:
      dataSource: photosTable
      code: resolvers/mutations/addPhotoPersonConnectorFunction.js

  dataSources:
    photosTable:
      type: AMAZON_DYNAMODB
      config:
        tableName: !Ref photosTable

plugins:
  - serverless-esbuild
  - serverless-offline
  - serverless-export-env
  - serverless-dotenv-plugin
  - serverless-appsync-plugin
  - serverless-dynamodb-local
  - serverless-iam-roles-per-function

functions:
  # will check the format of a file , move it into heic processor/ jpeg processor or unsupported folders
  processUploadedFile:
    name: ${self:custom.uploadFolderProcessorLambda}
    handler: src/handlers/processUploadedFile.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.uploadFolder}/'
    iamRoleStatementsName: 'uploadFolderProcessorStatements'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'

  # will convert heic to jpg
  heicImageConverter:
    name: ${self:custom.heicImageLambda}
    handler: src/handlers/heicImageConverter.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.heicConverterFolder}/'
    iamRoleStatementsName: 'heicImageConverterStatements'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'

  # will either move to base processing or image rekognition folder
  imageSorting:
    name: ${self:custom.imageSortingLambda}
    handler: src/handlers/imageSorting.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.imageSortingFolder}/'
    iamRoleStatementsName: 'imageSortingStatements'
    iamRoleStatements:
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'
        # existing: true
        # forceDeploy: true

  processBasePhoto:
    name: ${self:custom.baseImageProcessingLambda}
    handler: src/handlers/processBasePhotoImage.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.baseImageProcessingFolder}/'
          # existing: true
          # forceDeploy: true
    iamRoleStatementsName: 'processBasePhotoStatements'
    iamRoleStatements:
      # publish to amazon rekognition
      - Effect: Allow
        Action:
          - rekognition:IndexFaces
        Resource:
          - { Fn::GetAtt: [FaceRekognitionCollection, Arn] }
      # read/delete files from s3
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'
      # appSync Mutations
      - Effect: Allow
        Action:
          - appsync:GraphQL
        Resource:
          - {
              Fn::Join:
                [
                  '',
                  [
                    { Ref: GraphQlApi },
                    '/types/Mutation/fields/createFaceBaseRecognition',
                  ],
                ],
            }

  processPhoto:
    name: ${self:custom.photoProcessLambda}
    handler: src/handlers/processPhoto.handler
    timeout: 60
    events:
      - s3:
          bucket: ${self:custom.s3PhotosBucket}
          event: s3:ObjectCreated:*
          rules:
            - prefix: !Sub '${self:custom.imageProcessingFolder}/'
          # existing: true
          # forceDeploy: true
    iamRoleStatementsName: 'processPhotoStatements'
    iamRoleStatements:
      # publish to amazon rekognition
      - Effect: Allow
        Action:
          - rekognition:DetectFaces
          - rekognition:SearchFacesByImage
        Resource:
          - { Fn::GetAtt: [FaceRekognitionCollection, Arn] }
      # read/delete files from s3
      - Effect: Allow
        Action:
          - 's3:GetObject'
          - 's3:PutObject'
          - 's3:DeleteObject'
        Resource:
          - !Sub 'arn:aws:s3:::${self:custom.s3PhotosBucket}/*'
      # appSync Mutations
      - Effect: Allow
        Action:
          - appsync:GraphQL
        Resource:
          - {
              Fn::Join:
                [
                  '',
                  [
                    { Ref: GraphQlApi },
                    '/types/Mutation/fields/addPhoto',
                  ],
                ],
            }
          - {
              Fn::Join:
                [
                  '',
                  [
                    { Ref: GraphQlApi },
                    '/types/Mutation/fields/addPhotoPersonConnector',
                  ],
                ],
            }

resources:
  Resources:
    # DYNAMO DB
    photosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: GSI1PK
            AttributeType: S
          - AttributeName: GSI1SK
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: GSI1
            KeySchema:
              - AttributeName: GSI1PK
                KeyType: HASH
              - AttributeName: GSI1SK
                KeyType: RANGE
            Projection:
                ProjectionType: ALL
        TableName: ${self:custom.photosTable}

    # User Pool Groups
    CognitoPhotosGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        Description: 'vpn users belongs to this group'
        GroupName: 'PHOTOS_USER'
        Precedence: 2
        RoleArn:
          Fn::GetAtt: [PhotosGroupIAMRole, Arn]
        UserPoolId: ${param:AwsCognitoUserPoolId}

    PhotosGroupIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:custom.photosGroupIamRoleName}
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            Effect: Allow
            Principal:
              Federated:
                - 'cognito-identity-amazonaws.com'
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
        Description: 'VPN Customer Group Policy'
        Policies:
          - PolicyName: ${self:custom.photosGroupIamRoleName}
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'dynamodb:*'
                  Resource:
                    Fn::GetAtt: [photosTable, Arn]

    FaceRekognitionCollection:
      Type: AWS::Rekognition::Collection
      Properties:
        CollectionId: ${self:custom.rekognitionCollectionId}
