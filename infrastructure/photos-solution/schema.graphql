type Query {
  getPersonById(personId: ID!): Person
  getPersonPhotos(personId: ID!): Person
  getFaceBaseRekognitionsForPerson(personId: ID!): Person
}

# Photos
type Person @aws_iam @aws_cognito_user_pools {
  id: ID!
  firstName: String
  lastName: String
  createdAt: AWSDateTime!
  baseFaceRekognitions: [BaseFaceRekognition]
  photosWithPerson: [PhotoPersonConnector]
}

type Photo @aws_iam {
  id: ID!
  s3Path: String!
  createdAt: AWSDateTime!
  recognisedPeople: [PhotoPersonConnector]
}

type PhotoPersonConnector @aws_iam {
  personId: String!
  photoID: String!
  dimensions: AWSJSON!

  person: Person
  photo: Photo
}

type BaseFaceRekognition @aws_iam @aws_cognito_user_pools {
  rekognitionId: ID!
  s3Path: String!
  personId: String!
  createdAt: AWSDateTime!
}

type Mutation {
  createPerson(personDetails: PersonInput!): Person @aws_cognito_user_pools
  createFaceBaseRecognition(
    baseRecognitionDetails: BaseFaceRekognitionInput!
  ): BaseFaceRekognition! @aws_iam

  addPhoto(input: PhotoInput!): Photo! @aws_iam
  addPhotoPersonConnector(
    input: PhotoPersonConnectorInput!
  ): PhotoPersonConnector
}

# inputs
input BaseFaceRekognitionInput {
  rekognitionId: ID!
  personId: String!
  s3Path: String!
}

input PersonInput {
  firstName: String
  lastName: String
}

input PhotoPersonConnectorInput {
  personId: String!
  photoID: String!
  dimensions: AWSJSON!
}

input PhotoInput {
  id: ID!
  s3Path: String!
}

type Subscription {
  baseFaceRekognitionUpdated: BaseFaceRekognition
    @aws_subscribe(mutations: ["createFaceBaseRecognition"])
}

schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
